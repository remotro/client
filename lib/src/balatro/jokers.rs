use serde::{Serialize, Deserialize};
use crate::{balatro_enum, render};
use crate::balatro::deck::{Rank, Suit};
use crate::balatro::play::PokerHandKind;
use crate::balatro::translations::{Translatable, Translation, Translations};

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Joker {
    pub kind: JokerKind,
    pub price: u64,
    pub edition: Option<JokerEdition>,
    pub rental: bool,
    pub lifespan: Lifespan
}

balatro_enum!(JokerEdition {
    None = "e_base",
    Foil = "e_foil",
    Holographic = "e_holo",
    Polychrome = "e_polychrome",
    Negative = "e_negative"
});

impl Translatable for JokerEdition {
    fn translate(&self, translations: &Translations) -> Translation {
        let path = format!["misc.v_dictionary.{}", self.id()];
        match self {
            JokerEdition::None => render!(translations, path).unwrap(),
            JokerEdition::Foil => render!(translations, path, 10).unwrap(),
            JokerEdition::Holographic => render!(translations, path, 10).unwrap(),
            JokerEdition::Polychrome => render!(translations, path, 1.5).unwrap(),
            JokerEdition::Negative => render!(translations, path, 1).unwrap(),
        }
    }
}

balatro_enum!(JokerKind {
    Joker = "j_joker",
    GreedyJoker = "j_greedy_joker",
    LustyJoker = "j_lusty_joker",
    WrathfulJoker = "j_wrathful_joker",
    GluttenousJoker = "j_gluttenous_joker",
    Jolly = "j_jolly",
    Zany = "j_zany",
    Mad = "j_mad",
    Crazy = "j_crazy",
    Droll = "j_droll",
    Sly = "j_sly",
    Wily = "j_wily",
    Clever = "j_clever",
    Devious = "j_devious",
    Crafty = "j_crafty",
    Half = "j_half",
    EightBall { probability: u64 } = "j_8_ball",
    Stencil { xmult: u64 } = "j_stencil",
    FourFingers = "j_four_fingers",
    Mime = "j_mime",
    CreditCard = "j_credit_card",
    Ceremonial { mult: u64 } = "j_ceremonial",
    Banner = "j_banner", 
    MysticSummit = "j_mystic_summit",
    Marble = "j_marble",
    LoyaltyCard { left: u64 } = "j_loyalty_card",
    Misprint = "j_misprint",
    Dusk = "j_dusk",
    RaisedFist = "j_raised_fist",
    Chaos = "j_chaos",
    Fibonacci = "j_fibonacci",
    SteelJoker { xmult: f64 } = "j_steel_joker",
    ScaryFace = "j_scary_face",
    Abstract { mult: u64 } = "j_abstract",
    DelayedGrat = "j_delayed_grat",
    Hack = "j_hack",
    Pareidolia = "j_pareidolia",
    GrosMichel { probability: u64 } = "j_gros_michel",
    EvenSteven = "j_even_steven",
    OddTodd = "j_odd_todd",
    Scholar = "j_scholar",
    Business { probability: u64 } = "j_business",
    Supernova = "j_supernova",
    RideTheBus { mult: u64 } = "j_ride_the_bus",
    Space { probability: u64 } = "j_space",
    Egg = "j_egg",
    Burglar = "j_burglar",
    Blackboard = "j_blackboard",
    Runner { chips: u64 } = "j_runner",
    IceCream { chips: u64 } = "j_ice_cream",
    Dna { active: bool } = "j_dna",
    Splash = "j_splash",
    BlueJoker { chips: u64 } = "j_blue_joker",
    SixthSense = "j_sixth_sense",
    Constellation { xmult: f64 } = "j_constellation",
    Hiker = "j_hiker",
    Faceless = "j_faceless",
    GreenJoker { mult: u64 } = "j_green_joker",
    Superposition = "j_superposition",
    TodoList { poker_hand: PokerHandKind } = "j_todo_list",
    Cavendish { probability: u64 } = "j_cavendish",
    CardSharp = "j_card_sharp",
    RedCard { mult: u64 } = "j_red_card",
    Madness { xmult: f64 } = "j_madness",
    Square { chips: u64 } = "j_square",
    Seance = "j_seance",
    RiffRaff = "j_riff_raff",
    Vampire { xmult: f64 } = "j_vampire",
    Shortcut = "j_shortcut",
    Hologram { xmult: f64 } = "j_hologram",
    Vagabond = "j_vagabond",
    Baron = "j_baron",
    Cloud9 { earnings: u64 } = "j_cloud_9",
    Rocket { earnings: u64 } = "j_rocket",
    Obelisk { xmult: f64 } = "j_obelisk",
    MidasMask = "j_midas_mask",
    Luchador = "j_luchador",
    Photograph = "j_photograph",
    Gift = "j_gift",
    TurtleBean { hand_size: u64 } = "j_turtle_bean",
    Erosion { mult: u64 } = "j_erosion",
    ReservedParking { probability: u64 } = "j_reserved_parking",
    Mail { rank: Rank } = "j_mail",
    ToTheMoon = "j_to_the_moon",
    Hallucination { probability: u64} = "j_hallucination",
    FortuneTeller { mult: u64 } = "j_fortune_teller",
    Juggler = "j_juggler",
    Drunkard = "j_drunkard",
    Stone { chips: u64 } = "j_stone",
    Golden = "j_golden",
    LuckyCat { xmult: f64 } = "j_lucky_cat",
    Baseball = "j_baseball",
    Bull { chips: u64 } = "j_bull",
    DietCola = "j_diet_cola",
    Trading { active: bool } = "j_trading",
    Flash { mult: u64 } = "j_flash",
    Popcorn { mult: u64 } = "j_popcorn",
    Trousers { mult: u64 } = "j_trousers",
    Ancient { suit: Suit } = "j_ancient",
    Ramen { xmult: f64 } = "j_ramen",
    WalkieTalkie = "j_walkie_talkie",
    Selzer { hands_left: u64 } = "j_selzer",
    Castle { chips: u64, suit: Suit } = "j_castle",
    Smiley = "j_smiley",
    Campfire { xmult: f64 } = "j_campfire",
    Ticket = "j_ticket",
    MrBones = "j_mr_bones",
    Acrobat = "j_acrobat",
    SockAndBuskin = "j_sock_and_buskin",
    Swashbuckler { mult: u64 } = "j_swashbuckler",
    Troubadour = "j_troubadour",
    Certificate = "j_certificate",
    Smeared = "j_smeared",
    Throwback { xmult: f64 } = "j_throwback",
    HangingChad = "j_hanging_chad",
    RoughGem = "j_rough_gem",
    Bloodstone { probability: u64 } = "j_bloodstone",
    Arrowhead = "j_arrowhead",
    OnyxAgate = "j_onyx_agate",
    Glass { xmult: f64  } = "j_glass",
    Showman = "j_ring_master",
    FlowerPot = "j_flower_pot",
    Blueprint { compatible: bool } = "j_blueprint",
    Wee { chips: u64 } = "j_wee",
    MerryAndy = "j_merry_andy",
    Oops = "j_oops",
    Idol { rank: Rank, suit: Suit } = "j_idol",
    SeeingDouble = "j_seeing_double",
    Matador = "j_matador",
    HitTheRoad { xmult: f64 } = "j_hit_the_road",
    Duo = "j_duo",
    Trio = "j_trio",
    Family = "j_family",
    Order = "j_order",
    Tribe = "j_tribe",
    Stuntman = "j_stuntman",
    Invisible { rounds: u64 } = "j_invisible",
    Brainstorm { compatible: bool } = "j_brainstorm",
    Satellite { earnings: u64  } = "j_satellite",
    ShootTheMoon = "j_shoot_the_moon",
    DriversLicense { cards: u64 } = "j_drivers_license",
    Cartomancer = "j_cartomancer",
    Astronomer { xmult: f64 } = "j_astronomer",
    Burnt = "j_burnt",
    Bootstraps { mult: u64 } = "j_bootstraps",
    Caino { xmult: f64 } = "j_caino",
    Triboulet = "j_triboulet",
    Yorick { left: u64, xmult: f64 } = "j_yorick",
    Chicot = "j_chicot",
    Perkeo = "j_perkeo",
});

impl Translatable for JokerKind {
    fn translate(&self, translations: &Translations) -> Translation {
        let path = format!["descriptions.Joker.{}", self.id()];
        match self {
            Self::Joker => render!(translations, path, 4).unwrap(),
            Self::GreedyJoker => render!(translations, path, 3).unwrap(),
            Self::LustyJoker => render!(translations, path, 3).unwrap(),
            Self::WrathfulJoker => render!(translations, path, 3).unwrap(),
            Self::GluttenousJoker => render!(translations, path, 3).unwrap(),
            Self::Jolly => render!(translations, path, 8).unwrap(),
            Self::Zany => render!(translations, path, 12).unwrap(),
            Self::Mad => render!(translations, path, 10).unwrap(),
            Self::Crazy => render!(translations, path, 12).unwrap(),
            Self::Droll => render!(translations, path, 10).unwrap(),
            Self::Sly => render!(translations, path, 50).unwrap(),
            Self::Wily => render!(translations, path, 100).unwrap(),
            Self::Clever => render!(translations, path, 80).unwrap(),
            Self::Devious => render!(translations, path, 100).unwrap(),
            Self::Crafty => render!(translations, path, 80).unwrap(),
            Self::Half => render!(translations, path, 20).unwrap(),
            Self::EightBall { probability } => render!(translations, path, *probability, 4).unwrap(),
            Self::Stencil { xmult } => render!(translations, path, *xmult).unwrap(),
            Self::FourFingers => render!(translations, path).unwrap(),
            Self::Mime => render!(translations, path).unwrap(),
            Self::CreditCard => render!(translations, path, 20).unwrap(),
            Self::Ceremonial { mult } => render!(translations, path, *mult).unwrap(),
            Self::Banner => render!(translations, path, 30).unwrap(),
            Self::MysticSummit => render!(translations, path, 15).unwrap(),
            Self::Marble => render!(translations, path).unwrap(),
            Self::LoyaltyCard { left } => render!(translations, path, 4, 6, *left).unwrap(),
            Self::Misprint => render!(translations, path).unwrap(),
            Self::Dusk => render!(translations, path).unwrap(),
            Self::RaisedFist => render!(translations, path).unwrap(),
            Self::Chaos => render!(translations, path, 1).unwrap(),
            Self::Fibonacci => render!(translations, path, 8).unwrap(),
            Self::SteelJoker { xmult } => render!(translations, path, 0.25, *xmult).unwrap(),
            Self::ScaryFace => render!(translations, path, 30).unwrap(),
            Self::Abstract { mult } => render!(translations, path, 3, *mult).unwrap(),
            Self::DelayedGrat => render!(translations, path, 30).unwrap(),
            Self::Hack => render!(translations, path).unwrap(),
            Self::Pareidolia => render!(translations, path).unwrap(),
            Self::GrosMichel { probability } => render!(translations, path, *probability, 6).unwrap(),
            Self::EvenSteven => render!(translations, path, 4).unwrap(),
            Self::OddTodd => render!(translations, path, 31).unwrap(),
            Self::Scholar => render!(translations, path, 20, 4).unwrap(),
            Self::Business { probability } => render!(translations, path, *probability, 2).unwrap(),
            Self::Supernova => render!(translations, path).unwrap(),
            Self::RideTheBus { mult } => render!(translations, path, 1, *mult).unwrap(),
            Self::Space { probability } => render!(translations, path, *probability, 4).unwrap(),
            Self::Egg => render!(translations, path).unwrap(),
            Self::Burglar => render!(translations, path, 3).unwrap(),
            Self::Blackboard => render!(translations, path, 3, "Spades", "Clubs").unwrap(),
            Self::Runner { chips } => render!(translations, path, 15, *chips).unwrap(),
            Self::IceCream { chips } => render!(translations, path, *chips, 5).unwrap(),
            Self::Dna { active } => render!(translations, path).unwrap(),
            Self::Splash => render!(translations, path).unwrap(),
            Self::BlueJoker { chips } => render!(translations, path, 2, *chips).unwrap(),
            Self::SixthSense => render!(translations, path).unwrap(),
            Self::Constellation { xmult } => render!(translations, path, 0.1, *xmult).unwrap(),
            Self::Hiker => render!(translations, path, 5).unwrap(),
            Self::Faceless => render!(translations, path, 5, 3).unwrap(),
            Self::GreenJoker { mult } => render!(translations, path, 1, *mult).unwrap(),
            Self::Superposition => render!(translations, path).unwrap(),
            Self::TodoList { poker_hand } => render!(translations, path, 5, poker_hand.translate(translations).name).unwrap(),
            Self::Cavendish { probability } => render!(translations, path, *probability, 1000).unwrap(),
            Self::CardSharp => render!(translations, path, 3).unwrap(),
            Self::RedCard { mult } => render!(translations, path, 3, *mult).unwrap(),
            Self::Madness { xmult } => render!(translations, path, 0.5).unwrap(),
            Self::Square { chips } => render!(translations, path, 4, *chips).unwrap(),
            Self::Seance => render!(translations, path, "Straight Flush").unwrap(),
            Self::RiffRaff => render!(translations, path, 2).unwrap(),
            Self::Vampire { xmult } => render!(translations, 0.1, *xmult).unwrap(),
            Self::Shortcut => render!(translations, path).unwrap(),
            Self::Hologram { xmult } => render!(translations, path).unwrap(),
            Self::Vagabond => render!(translations, path, 4).unwrap(),
            Self::Baron => render!(translations, path).unwrap(),
            Self::Cloud9 { earnings } => render!(translations, path, 1, *earnings).unwrap(),
            Self::Rocket { earnings } => render!(translations, path, *earnings, 2).unwrap(),
            Self::Obelisk { xmult } => render!(translations, path, 0.5, *xmult).unwrap(), // CONFIRM
            Self::MidasMask => render!(translations, path).unwrap(),
            Self::Luchador => render!(translations, path).unwrap(),
            Self::Photograph => render!(translations, path, 2).unwrap(),
            Self::Gift => render!(translations, path, 1).unwrap(),
            Self::TurtleBean { hand_size } => render!(translations, path, *hand_size, 1).unwrap(),
            Self::Erosion { mult } => render!(translations, path, 1, *mult).unwrap(),
            Self::ReservedParking { probability } => render!(translations, path, *probability, 2).unwrap(),
            Self::Mail { rank } => render!(translations, path, rank.translate(translations).name, 1).unwrap(),
            Self::ToTheMoon => render!(translations, path, 1).unwrap(),
            Self::Hallucination { probability} => render!(translations, path, *probability, 2).unwrap(),
            Self::FortuneTeller { mult } => render!(translations, path, 1, *mult).unwrap(),
            Self::Juggler => render!(translations, path, 1).unwrap(),
            Self::Drunkard => render!(translations, path, 1).unwrap(),
            Self::Stone { chips } => render!(translations, path, 50, *chips).unwrap(),
            Self::Golden => render!(translations, path, 4).unwrap(),
            Self::LuckyCat { xmult } => render!(translations, path, 0.1, *xmult).unwrap(),
            Self::Baseball => render!(translations, path, 0.5).unwrap(),
            Self::Bull { chips } => render!(translations, path, 2, *chips).unwrap(),
            Self::DietCola => render!(translations, path).unwrap(),
            Self::Trading { active } => render!(translations, path, 3).unwrap(),
            Self::Flash { mult } => render!(translations, path, 2, *mult).unwrap(),
            Self::Popcorn { mult } => render!(translations, path, *mult, 4).unwrap(),
            Self::Trousers { mult } => render!(translations, path, 2, *mult).unwrap(),
            Self::Ancient { suit } => render!(translations, path, 1.5, suit.translate(translations).name).unwrap(),
            Self::Ramen { xmult } => render!(translations, path, *xmult, 0.1).unwrap(),
            Self::WalkieTalkie => render!(translations, path, 10, 4).unwrap(),
            Self::Selzer { hands_left } => render!(translations, path, *hands_left).unwrap(),
            Self::Castle { chips, suit } => render!(translations, path, *chips, 2, suit.translate(translations).name, *chips).unwrap(),
            Self::Smiley => render!(translations, path, 5).unwrap(),
            Self::Campfire { xmult } => render!(translations, path, 0.5, *xmult).unwrap(),
            Self::Ticket => render!(translations, path, 3).unwrap(),
            Self::MrBones => render!(translations, path).unwrap(),
            Self::Acrobat => render!(translations, path, 3).unwrap(),
            Self::SockAndBuskin => render!(translations, path).unwrap(),
            Self::Swashbuckler { mult } => render!(translations, path, *mult).unwrap(),
            Self::Troubadour => render!(translations, path, 3, 1).unwrap(),
            Self::Certificate => render!(translations, path).unwrap(),
            Self::Smeared => render!(translations, path).unwrap(),
            Self::Throwback { xmult } => render!(translations, path, 0.25, *xmult).unwrap(),
            Self::HangingChad => render!(translations, path, 3).unwrap(),
            Self::RoughGem => render!(translations, path).unwrap(),
            Self::Bloodstone { probability } => render!(translations, path, *probability, 2).unwrap(),
            Self::Arrowhead => render!(translations, path, 50).unwrap(),
            Self::OnyxAgate => render!(translations, path, 7).unwrap(),
            Self::Glass { xmult  } => render!(translations, path, 0.25, *xmult).unwrap(),
            Self::Showman => render!(translations, path).unwrap(),
            Self::FlowerPot => render!(translations, path, 3).unwrap(),
            Self::Blueprint { compatible } => render!(translations, path).unwrap(),
            Self::Wee { chips } => render!(translations, path, 8, *chips).unwrap(),
            Self::MerryAndy => render!(translations, path, 3, 2).unwrap(),
            Self::Oops => render!(translations, path).unwrap(),
            Self::Idol { rank, suit } => render!(translations, path, rank.translate(translations).name, suit.translate(translations).name).unwrap(),
            Self::SeeingDouble => render!(translations, path, 2).unwrap(),
            Self::Matador => render!(translations, path).unwrap(),
            Self::HitTheRoad { xmult } => render!(translations, path, 0.5, *xmult).unwrap(),
            Self::Duo => render!(translations, path, 2).unwrap(),
            Self::Trio => render!(translations, path, 3).unwrap(),
            Self::Family => render!(translations, path, 4).unwrap(),
            Self::Order => render!(translations, path, 3).unwrap(),
            Self::Tribe => render!(translations, path, 2).unwrap(),
            Self::Stuntman => render!(translations, path, 250, 3).unwrap(),
            Self::Invisible { rounds } => render!(translations, path, *rounds).unwrap(),
            Self::Brainstorm { compatible } => render!(translations, path).unwrap(),
            Self::Satellite { earnings  } => render!(translations, path, 1, *earnings).unwrap(),
            Self::ShootTheMoon => render!(translations, path, 13).unwrap(),
            Self::DriversLicense { cards } => render!(translations, path, 3, 18, *cards).unwrap(),
            Self::Cartomancer => render!(translations, path).unwrap(),
            Self::Astronomer { xmult } => render!(translations, path).unwrap(),
            Self::Burnt => render!(translations, path).unwrap(),
            Self::Bootstraps { mult } => render!(translations, path, 2, 5, *mult).unwrap(),
            Self::Caino { xmult } => render!(translations, path, 1, *xmult).unwrap(),
            Self::Triboulet => render!(translations, path, 2).unwrap(),
            Self::Yorick { left, xmult } => render!(translations, path, 1, 13, *left, *xmult).unwrap(),
            Self::Chicot => render!(translations, path).unwrap(),
            Self::Perkeo => render!(translations, path).unwrap(),
        }
    }
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum Lifespan {
    Normal,
    Eternal,
    Perishable { rounds_left: u64 }
}
